set.seed(7900)
library(caret)
library(randomForest)
dataset.train <- read.csv("C:/Users/admin/Documents/pml-training.csv", na.strings=c("", "NA", "#DIV/0!"), header=TRUE, sep="," )
dataset.test <- read.csv("C:/Users/Admin/Documents/pml-testing.csv", na.strings=c("", "NA", "#DIV/0!"), header=TRUE, sep=",")
dataset.train <- dataset.train[,-c(1:7)]
dataset.test  <- dataset.test[,-c(1:7)]
fun.avecNA <- function(x)  { if(sum(is.na(dataset.train[, x])) > 0.50*nrow(dataset.train)) {return(FALSE)} else {return(TRUE)}  }
var.avecNA <- sapply(X= colnames(dataset.train), FUN=fun.avecNA)
dataset.train <- dataset.train[, var.avecNA]
dataset.test  <- dataset.test[, var.avecNA]
var.avecClasse <- colnames(dataset.train) == "classe"
var.correlated <- findCorrelation(cor(dataset.train[, !var.avecClasse]), cutoff=0.8)
names(dataset.train)[var.correlated]
var.TrainControl <- trainControl(method = "cv", preProcOptions="pca", number = 7, verboseIter=FALSE , allowParallel=TRUE)
subtrain <- createDataPartition(y=dataset.train$classe, p=0.80, list=FALSE)
dataset.subtrain <- dataset.train[subtrain, ]
dataset.subtest <-  dataset.train[-subtrain,]
mod.BGLM     <- train(classe ~ ., data = dataset.subtrain, method = "bayesglm",             trControl= var.TrainControl)
mod.LDA      <- train(classe ~ ., data = dataset.subtrain, method = "lda",                  trControl= var.TrainControl)
mod.LOGB     <- train(classe ~ ., data = dataset.subtrain, method = "LogitBoost",           trControl= var.TrainControl)
mod.NNET     <- train(classe ~ ., data = dataset.subtrain, method = "nnet",  verbose=FALSE, trControl= var.TrainControl)
mod.RF       <- train(classe ~ ., data = dataset.subtrain, method = "rf",                   trControl= var.TrainControl)
mod.SVMLin   <- train(classe ~ ., data = dataset.subtrain, method = "svmLinear",            trControl= var.TrainControl)
mod.SVMRad   <- train(classe ~ ., data = dataset.subtrain, method = "svmRadial",            trControl= var.TrainControl)
dataset.subtest$pred.GBLM    <- predict(object = mod.BGLM,   newdata = dataset.subtest)
dataset.subtest$pred.LDA     <- predict(object = mod.LDA,    newdata = dataset.subtest)
dataset.subtest$pred.LOGB    <- predict(object = mod.LOGB,   newdata = dataset.subtest)
dataset.subtest$pred.NNET    <- predict(object = mod.NNET,   newdata = dataset.subtest)
dataset.subtest$pred.RF      <- predict(object = mod.RF,     newdata = dataset.subtest)
dataset.subtest$pred.SVMLin  <- predict(object = mod.SVMLin, newdata = dataset.subtest)
dataset.subtest$pred.SVMRad  <- predict(object = mod.SVMRad, newdata = dataset.subtest)
dataset.test$pred.GBLM    <- predict(object = mod.BGLM,   newdata = dataset.test)
dataset.test$pred.LDA     <- predict(object = mod.LDA,    newdata = dataset.test)
dataset.test$pred.LOGB    <- predict(object = mod.LOGB,   newdata = dataset.test)
dataset.test$pred.NNET    <- predict(object = mod.NNET,   newdata = dataset.test)
dataset.test$pred.RF      <- predict(object = mod.RF,     newdata = dataset.test)
dataset.test$pred.SVMLin  <- predict(object = mod.SVMLin, newdata = dataset.test)
dataset.test$pred.SVMRad  <- predict(object = mod.SVMRad, newdata = dataset.test)
mod.ENS     <- train(classe ~ ., data = dataset.subtest, method = "rf", trControl= var.TrainControl)
pred.ENS <- predict(object = mod.ENS, newdata = dataset.test)
pred.ENS
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(pred.ENS)
mod.ENS     <- train(classe ~ ., data = dataset.subtest, method = "rf")
pred.ENS <- predict(object = mod.ENS, newdata = dataset.test)
pred.ENS
pred.ENS <- predict(object = mmod.RF, newdata = dataset.test)
pred.ENS <- predict(object = mod.RF, newdata = dataset.test)
pred.ENS
mod.ENS     <- train(classe ~ ., data = dataset.subtest, method = "lda")
mod.ENS     <- train(classe ~ ., data = dataset.subtest, method = "lda", trControl= var.TrainControl)
mod.ENS     <- train(classe ~ blend.predictors, data = dataset.subtest, method = "lda")
blend.predictors <- c("pred.GBLM", "pred.LDA", "pred.LOGB", "pred.NNET", "pred.RF", "pred.SVMLin", "pred.SVMRad")
mod.ENS     <- train(classe ~ blend.predictors, data = dataset.subtest, method = "lda")
mod.ENS     <- train(classe ~ ., data = dataset.subtest, method = "gbm")
pred.ENS <- predict(object = mod.ENS, newdata = dataset.test)
pred.ENS
View(dataset.test)
View(dataset.subtest)
mod.ENS     <- train(classe ~ ., data = dataset.subtest, method = "bayesglm", trControl= var.TrainControl)
pred.ENS <- predict(object = mod.ENS, newdata = dataset.test)
pred.ENS
mod.ENS     <- train(classe ~ ., data = dataset.subtest, method = "bayesglm")
pred.ENS <- predict(object = mod.ENS, newdata = dataset.test)
pred.ENS
View(dataset.subtest)
mod.ENS     <- train(classe ~ pred.GBLM + pred.LDA", "pred.LOGB", "pred.NNET", "pred.RF", "pred.SVMLin", "pred.SVMRad", data = dataset.subtest, method = "rf", trControl= var.TrainControl)
mod.ENS     <- train(classe ~ pred.GBLM + pred.LDA+pred.LOGB+pred.NNET+pred.RF+pred.SVMLin+pred.SVMRad, data = dataset.subtest, method = "rf", trControl= var.TrainControl)
mod.ENS
pred.ENS <- predict(object = mod.ENS, newdata = dataset.test)
pred.ENS
pred.ENS <- predict(object = mod.ENS, newdata = dataset.test[,blend.predictors])
pred.ENS
